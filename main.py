import itertools
import os

import questionary
import requests
from loguru import logger
from tabulate import tabulate
from tinydb import TinyDB

from config import settings
from manager_account import WarpManager
from models import Account
from warp import Warp


def truncate(value, length=10):
    if isinstance(value, str) and len(value) > length:
        return value[:length]
    return value


def print_on_table(data: list, headers: list):
    truncated_data = [
        [i] + [truncate(cell) for cell in row] for i, row in enumerate(data, 1)
    ]
    table = tabulate(truncated_data, headers, tablefmt="grid")
    print(table)


def show_table():
    db = TinyDB(settings.db_patch, ensure_ascii=False)
    table_data = []
    headers = None
    for data in db.all():
        account = Account.model_validate(data)

        if not headers:
            headers = account.to_list_headers()
            headers.insert(0, "#")

        table_data.append(account.to_list_value())

    print_on_table(data=table_data, headers=headers)


def prepare_data():
    db = TinyDB(settings.db_patch, ensure_ascii=False)

    with open("data/const/private_seeds.txt", "r", encoding="utf-8") as f:
        private_seeds = f.read().splitlines()

    if not private_seeds:
        raise ValueError("–§–∞–∏–ª —Å —Å–∏–¥–∫–∞–º–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")

    try:
        with open("data/const/languages.txt", "r", encoding="utf-8") as f:
            language = f.read().splitlines()
            language_cycle = itertools.cycle(language)
        if not language:
            logger.warning(
                "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —è–∑—ã–∫–∏, —Å–æ–∑–¥–∞—é –±–¥ –±–µ–∑ —è–∑—ã–∫–æ–≤, —Ñ—É–Ω–∫—Ü–∏–∏ –≥–ø—Ç –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ —Å—Ç–∞–±–∏–ª—å–Ω–æ."
            )
    except FileNotFoundError:
        language = []

    try:
        with open("data/const/proxy.txt", "r", encoding="utf-8") as f:
            proxys = f.read().splitlines()
            proxy_cycle = itertools.cycle(proxys)
        if not proxys:
            logger.warning("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –ø—Ä–æ–∫—Å–∏, —Å–æ–∑–¥–∞—é –±–¥ –±–µ–∑ –ø—Ä–æ–∫—Å–µ–π.")
    except FileNotFoundError:
        proxys = []

    try:
        with open("data/gpt/roles.txt", "r", encoding="utf-8") as f:
            roles = f.read().splitlines()
            role_cycle = itertools.cycle(roles)
        if not roles:
            logger.warning("–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–æ–ª–∏ –¥–ª—è chat-gpt, —Å–æ–∑–¥–∞–µ–º –±–¥ –±–µ–∑ —Ä–æ–ª–µ–π.")
    except FileNotFoundError:
        roles = []

    table_data = []
    headers = None
    for i, ps in enumerate(private_seeds, 1):
        proxy = next(proxy_cycle, None)
        role = next(role_cycle, None)
        language = next(language_cycle, None)

        account = Account(ps=ps, proxy=proxy, role=role)
        client = Warp(account=account)
        account = Account(
            display_name=client.me.display_name,
            username=client.me.username,
            bio=client.me.profile.bio.text,
            language=language,
            follower_count=client.me.follower_count,
            following_count=client.me.following_count,
            ps=ps,
            proxy=proxy,
            role=role,
        )

        db.insert(account.model_dump())

        if not headers:
            headers = account.to_list_headers()
            headers.insert(0, "#")

        table_data.append(account.to_list_value())

        if settings.mobile_proxy:
            logger.warning("–ú–µ–Ω—è–µ–º ip —É –º–æ–±–∏–ª—å–Ω–æ–π –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –±–¥")

            print(requests.get(settings.mobile_change_link).text)
    print_on_table(data=table_data, headers=headers)


if __name__ == "__main__":
    if os.path.exists(settings.db_patch):
        choice = questionary.select(
            "–ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ Warpcast?",
            choices=[
                "------ –°–¢–ê–ù–î–ê–†–¢–ù–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ",
                "1. –ü–∏—à–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø–æ—Å—Ç –∏–∑ posts.txt –∏–ª–∏ —Å –ø–æ–º–æ—â—å—é GPT",
                "2. –°—Ç–∞–≤–∏–º –ª–∞–π–∫–∏ –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ –ø–æ—Å—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                "3. –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç—ã",
                "4. –ü–∏—à–µ–º —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–º–µ–Ω—Ç —Å –ø–æ–º–æ—â—å—é GPT",
                " " * 15,
                "------ –ú–ê–†–®–†–£–¢–´ –° –†–ê–ù–î–û–ú–û–ú",
                "5. –î–µ–ª–∞–µ–º rnd –ø–æ—Å—Ç, –ø–∏—à–µ–º rnd –∫–æ–º–µ–Ω—Ç –Ω–∞ rnd –ø–æ—Å—Ç, —Å—Ç–∞–≤–∏–º rnd –ª–∞–π–∫–∏, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ rnd –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –î–∞–Ω–Ω—ã–µ —Å —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å GPT",
                "6. –ó–∞–ø—É—Å–∫–∞–µ–º –ë–û–õ–¨–®–û–ô —Ä–∞–Ω–¥–æ–º–Ω—ã–π –º–æ–¥—É–ª—å, –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–¥ –µ–≥–æ –∑–∞–ø—É—Å–∫–æ–º",
                " " * 15,
                "------ –ó–ê–ü–û–õ–ù–ï–ù–ò–ï –ê–ö–ö–ê–£–ù–¢–ê",
                "7. –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º–µ–Ω–∞ —Å account_data.txt –∏–ª–∏ —á–µ—Ä–µ–∑ GPT",
                "8. –ó–∞–ø–æ–ª–Ω—è–µ–º –±–∏–æ c account_data.txt –∏–ª–∏ —á–µ—Ä–µ–∑ GPT",
                "9. –ó–∞–ø–æ–ª–Ω—è–µ–º –∏–º–µ–Ω–∞ –∏ –±–∏–æ —Å account_data.txt –∏–ª–∏ —á–µ—Ä–µ–∑ GPT",
                " " * 15,
                "------ –ß–ï–ö–ï–† –ë–ê–ù–û–í",
                "10. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–Ω–µ–≤–æ–π –±–∞–Ω –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç–∞—Ö (–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –≤ –±–¥)",
                " " * 15,
                "------ –ö–û–ù–¢–†–û–õ–¨ –ê–ö–ö–ê–£–ù–¢–û–í/–ë–î",
                "11. –ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É –±–¥ (–û–Ω–∞ —Ç–∞–∫-–∂–µ –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –ø–∞–ø–∫–µ bd. –ß–µ—Ä–µ–∑ vscode –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–∞–∏–ª, –≤—ã–¥–µ–ª–∏—Ç–µ –≤—Å–µ, –ø—Ä–∞–≤–æ–π –∫–Ω–æ–ø–∫–æ–π, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç.)",
                " " * 15,
                "0. –í—ã—Ö–æ–¥",
            ],
            instruction="(–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)",
            pointer="ü•é",
        ).ask()
    else:
        choice = questionary.select(
            "–£ –≤–∞—Å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–∞ db. –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—Ç–µ, —á—Ç–æ —É –≤–∞—Å –¥–æ–±–∞–≤–ª–µ–Ω—ã private_seeds.txt, proxy.txt (login:pass@ip:port), roles.txt –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è gpt",
            choices=[
                "99. C–æ–∑–¥–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö",
            ],
            instruction="(–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä–µ–ª–∫–∏ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è)",
            pointer="ü•é",
        ).ask()

    match choice.split(".")[0]:
        case "1":
            client = WarpManager()
            client.post_random_message()

        case "2":
            client = WarpManager()
            client.like_random_posts()

        case "3":
            client = WarpManager()
            client.follow_random_accounts()

        case "4":
            client = WarpManager()
            client.post_random_comment()

        case "5":
            client = WarpManager()
            client.perform_all_randomly()

        case "6":
            client = WarpManager()
            client.perform_custom_randomly()

        case "7":
            client = WarpManager()
            client.perform_set_display_name()

        case "8":
            client = WarpManager()
            client.perform_set_bio()

        case "9":
            client = WarpManager()
            client.perform_set_display_name_and_bio()

        case "10":
            client = WarpManager()
            client.shadow_ban_check()

        case "11":
            show_table()

        case "0":
            pass

        case "99":
            prepare_data()
            logger.success(
                "–£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∏–ª –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö! –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–æ—Ñ—Ç, —á—Ç–æ –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –∞–∫–∫–∞—É–Ω—Ç–∞–º–∏."
            )

        case _:
            logger.error("–í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç")
